#!/bin/sh
# -*- mode: sh; -*- vim: ft=sh:ts=4:sw=4:norl:et:

#                    _
#   _______  ___    (_)_ _____ ____
#  / __/ _ \/ _ \  / / // / _ `/ -_)
#  \__/\___/_//_/_/ /\_,_/\_, /\__/
#              |___/     /___/

#   conjuge --- Un bescherelle pour ton shell
#
#   USAGE
#        ${SCRIPT_NAME}  -[V:d:sqcETh] [-V <verbe>] [-d <BESCHERELLE_DIR>]
#
#   OPTIONS
#        -V     <verbe>               Search for a specifif verb
#        -d     <BESCHERELLE_DIR>     Specify alternate directory for retrieved org files
#                                     (default: ~/Documents/Bescherelle)
#        -s                           fuzzy search
#        -E                           open org file in EDITOR
#        -B                           Bescherelle search (search in all BESCHERELLE_DIR)
#        -f                           feminin form output
#        -m                           masculin form output
#        -c                           output native compose chars (i.e. `’` intead of `'`)
#        -t                           tts output (requires working piper-tts configuration)
#        -T                           output verb tenses in output (TRIM_TENSE=0)
#        -q                           quiet (default)
#        -v                           verbose (VERBOSE=0)
#        -h                           display this help message

#{{{ Default Variables
BESCHERELLE_DIR="$HOME/Documents/Bescherelle"
verb_list="$BESCHERELLE_DIR/verbes"
OPEN=0
SEARCH=0
COMPOSE=0
QUIET=1
TTS_OUT=0
TRIM_TENSE=1
BESCHERELLE=0
MASCULIN=0
FEMININ=0
#}}}

#{{{ Functions
usage() {
    env SCRIPT_NAME=$0 envsubst <<-'MAN'
                    _
   _______  ___    (_)_ _____ ____
  / __/ _ \/ _ \  / / // / _ `/ -_)
  \__/\___/_//_/_/ /\_,_/\_, /\__/
              |___/     /___/

   conjuge --- Un bescherelle pour ton shell

   USAGE
        ${SCRIPT_NAME}  -[V:d:sqcETh] [-V <verbe>] [-d <BESCHERELLE_DIR>]

   OPTIONS
        -V     <verbe>               Search for a specifif verb
        -d     <BESCHERELLE_DIR>     Specify alternate directory for retrieved org files
                                     (default: ~/Documents/Bescherelle)
        -s                           fuzzy search
        -E                           open org file in EDITOR
        -B                           Bescherelle search (search in all BESCHERELLE_DIR)
        -f                           feminin form output
        -m                           masculin form output
        -c                           output native compose chars (i.e. `’` intead of `'`)
        -t                           tts output (requires working piper-tts configuration)
        -T                           output verb tenses in output (TRIM_TENSE=0)
        -q                           quiet (default)
        -v                           verbose (QUIET=0)
        -h                           display this help message


   SEE ALSO

      parallel(1)     fzf(1)    curl(1)   gettext(1)

   CITE

      Tange, O. (2025, May 22). GNU Parallel 20250522 ('Iberian Blackout').
      Zenodo. https://doi.org/10.5281/zenodo.15484911

MAN
}

trim_if_match() {
    pattern="$1"
    awk -v IGNORECASE=1 -v pat="$pattern" '
          { lines[NR] = $0 }
          END {
            if (lines[NR] ~ pat) NR--
            for (i = 1; i <= NR; i++) print lines[i]
          }
        '
}

convert_compose_chars() {
    f="$1"
    [ -f "$f" ] && input=$(cat "$f") || input=$(cat)
    echo "$input"| sed "s/'/’/g;s/oe/[œ]/gI"
}

to_ascii() {
    f="$1"
    [ -f "$f" ] && input=$(cat "$f") || input=$(cat)
    echo "$input" | sed -e 'y/àáâäèéêëìíîïòóôöùúûüçÀÁÂÄÈÉÊËÌÍÎÏÒÓÔÖÙÚÛÜÇ/aaaaeeeeiiiioooouuuucAAAAEEEEIIIIOOOOUUUUC/' \
                        -e 's/œ/oe/g; s/Œ/OE/g'
}

to_lowercase() {
    [ $# -gt 0 ] && input="$*" || input=$(cat)
    echo "$input" | sed 's/.*/\L&/'
}

org_concat_headers() {
  awk '
    function titlecase(s,   i, n, a, w) {
      n = split(s, a, /[ \t]+/)
      for (i = 1; i <= n; i++) {
        w = tolower(a[i])
        a[i] = toupper(substr(w,1,1)) substr(w,2)
      }
      return a[1] (n > 1 ? " " a[2] : "") (n > 2 ? " " a[3] : "") (n > 3 ? " " a[4] : "") (n > 4 ? " " a[5] : "") (n > 5 ? " " a[6] : "") (n > 6 ? " " a[7] : "") (n > 7 ? " " a[8] : "")
    }

    /^* /      { h1 = titlecase(gensub(/^\* +/, "", 1)); next }
    /^** /     { sub(/^\*\* +/, "", $0); print h1 " " $0; next }
    /^[^*]/    { print }
  ' "${1:--}"
}

to_title_case() {
    [ $# -gt 0 ] && input="$*" || input=$(cat)
    echo "$input" | sed -E 's/(^|[^a-zA-Z])([a-z])/\1\u\2/g'
}

trim_tense() {
    [ $# -gt 0 ] && input="$*" || input=$(cat)
    echo "$input" | grep -vE '^(Conditionnel|Indicatif|Impératif|Infinitif|Subjonctif|Participe)'
}

verbcat() {
    v="${1%.org}.org" ;
    [ -f "$v" ] && output=$(cat "$v" | org_concat_headers | sed "/^$/" | fzf --multi)
    [ -n "$output" ] && echo "$output"
}

bescherelle () { cat "${BESCHERELLE_DIR}"/* | grep -vE '^[*#]' | sed "/^$/d" | fzf --multi ; }

#}}}

verb=$(echo "$1" | to_ascii | to_lowercase)

while getopts "V:d:smBfOTqctvh" opt ; do
    case "$opt" in
        V) verb=$(echo "$OPTARG" | to_ascii | to_lowercase) ;;
        d) BESCHERELLE_DIR="$OPTARG" ;;
        O) OPEN=1 ;;
        B) BESCHERELLE=1 ;;
        s) SEARCH=1 ;;
        m) MASCULIN=1 ;;
        f) FEMININ=1 ;;
        v) QUIET=0 ;;
        q) QUIET=1 ;;
        c) COMPOSE=1 ;;
        T) TRIM_TENSE=0 ;;
        t) TTS_OUT=1 ;;
        h) usage >&2 ; exit 0 ;;
    esac
done
shift $((OPTIND - 1))

[ -n "$verb" ] || verb=$(echo "$1" | to_ascii | to_lowercase)
[ -d "$BESCHERELLE_DIR" ] || mkdir -pv "$BESCHERELLE_DIR"
[ $BESCHERELLE -eq 1 ] && output=$(bescherelle)
[ $(find "$BESCHERELLE_DIR" -type f -name "*.org" | wc -l) -gt 1 ] || {
        [ -f "$(find . -type f -name 'verbes')" ] && mv ./verbes "$verb_list"
        [ -f "$verb_list" ] || curl -sL 'https://raw.githubusercontent.com/cf-tgg/org-bescherelle/refs/heads/master/verbes' > "$verb_list"
        bootstrap_script="$BESCHERELLE_DIR/bescherelle-parallel-bootstrap.sh"
        printf '%s est vide.. Peut-être essayer: `hul=$(ulimit -Hn) ; ul=$((hul / 2)) ; ulimit -n ${ul} ; parallel --progress --verbose --dry-run -j0 --joblog "%s" "%s" -v -V {} :::: "%s` ?\n' "$BESCHERELLE_DIR" "$BESCHERELLE_DIR/bescherelle-bootstrap.log" "$0" "$verb_list" >&2
        printf '#!/bin/sh\n\nhul=$(ulimit -Hn) ; ul=$((hul / 2)) ; ulimit -n ${ul} ;\n %s --progress --verbose --dry-run -j0 --joblog %s %s/%s -v -V {} :::: %s\n' "$(command -v parallel)" "$BESCHERELLE_DIR/bescherelle-bootstrap.log" "$(pwd)" "${0##*/}" "$verb_list" | tee "$bootstrap_script"
        [ -f "$bootstrap_script" ] && chmod 0700 "$bootstrap_script" && "$bootstrap_script" && {
                printf "dry run completed. Run the real job? [y/N] "
                stty -echo -icanon
                ans=$(dd bs=1 count=1 2>/dev/null)
                stty sane
                echo "$ans" | grep -i "y" && sed -i 's/ --dry-run//' "$bootstrap_script" && "$bootstrap_script"
                exit 0
            }
        exit 1
}

orgverb="${BESCHERELLE_DIR}/${verb}.org"

if [ -f "$orgverb" ] && [ $(wc -l < "$orgverb") -gt 2 ] ; then
    [ $QUIET -lt 1 ] && echo "$verb est déjà là: $orgverb" >&2
    [ $OPEN -eq 1 ] && setsid -f $EDITOR "$orgverb" >/dev/null 2>&1
    [ $SEARCH -gt 0 ] && output=$(grep -rn "$verb" "$BESCHERELLE_DIR" | cut -d ':' -f1 | sort -u | xargs cat | grep -vE '^[*#]' |sed "/^$/d" | fzf --multi) || \
            output=$(cat "$orgverb" | grep -vE '^#'  | org_concat_headers | sed "/^$/d" | fzf --multi)
else
    LC_ALL=en_US.UTF-8 curl -sL "https://conjugaison.bescherelle.com/verbes/$verb" |
        iconv -f utf-8 -t utf-8 2>/dev/null |
        xmllint --html --xpath '//div[contains(@class,"card-type")]/div/h4 | //div[contains(@class,"card-body")]/h5 | //p' - 2>/dev/null |
        sed -e 's~<h4[^>]*>~\n#MODE# ~g' \
            -e 's~<h5[^>]*>~\n#TENSE# ~g' \
            -e 's~<personal-pronoun>~\n#PP# ~g' -e 's~</personal-pronoun>~~g' \
            -e 's~<auxiliary>~ #AUX# ~g' -e 's~</auxiliary>~~g' \
            -e 's~<verb>~ #V# ~g' -e 's~</verb>~~g' \
            -e 's~<[^>]*>~~g' |
        sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' -e 's/  */ /g' |
        awk -v verb="$verb" '
      BEGIN {
          print "#+title: Conjugaison du verbe " verb
      }
      /^#MODE#/ {
          sub(/^#MODE# /, "", $0)
          print "\n* " $0
          next
      }
      /^#TENSE#/ {
          sub(/^#TENSE# /, "", $0)
          print "\n** " $0 "\n"
          next
      }
      {
          gsub(/#PP# /, "", $0)
          gsub(/#AUX# /, "", $0)
          gsub(/#V# /, "", $0)
          if (NF) print $0
      }
      ' | sed "s/’ /'/g;s/  / /g" | trim_if_match "contacter" >"$orgverb"
    [ -f "$orgverb" ] && output=$(verbcat "$orgverb")
fi

if [ -n "$output" ]; then
    [ $FEMININ -eq 1 ] && output=$(echo "$output" | sed 's/il (//g;s/ils (//g;s/(e)/e/g;s/e)/e/g;s/elles)/elles/g;s/  / /g' )
    [ $MASCULIN -eq 1 ] && output=$(echo "$output" | sed 's/ (elle)//g;s/ (elles)//g;s/(e)//g')
    [ $COMPOSE -eq 1 ] && output=$(echo "$output" | convert_compose_chars)
    [ $TRIM_TENSE -eq 1 ] && output=$(echo "$output" | trim_tense)
    [ $TRIM_TENSE -eq 0 ] && output=$(echo "$output" | sed 's/^\(Conditionnel\|Indicatif\|Impératif\|Infinitif\|Subjonctif\|Participe\)\(.*$\)/\n\\033\[4;1\;97m\1 ~\2\\033\[0m/')
    [ $TTS_OUT -gt 0 ] && tts -m "fr_FR-gilles-low" "$output" || echo -e "$output"
fi

exit 0
